# https://goframe.org/docs/web/server-config-file-template
server:
  rest-api-service:
    address: ":28070"
    isEnable: true                                           # 是否启用级联服务
    openapiPath: "/api.json"
    swaggerPath: "/swagger"
    maxHeaderBytes: "20KB"
    serverAgent: "GoFrame HTTP Server"                       # 服务端Agent信息。默认为"GoFrame HTTP Server"
    logPath: "./logs/"                                       # 日志文件存储目录路径，建议使用绝对路径。默认为空，表示关闭
    logStdout: true                                          # 日志是否输出到终端。默认为true
    errorStack: true                                         # 当Server捕获到异常时是否记录堆栈信息到日志中。默认为true
    errorLogEnabled: true                                    # 是否记录异常日志信息到日志中。默认为true
    errorLogPattern: "message-relay-error-{Y-m-d}.log"       # 异常错误日志文件格式。默认为"error-{Ymd}.log"
    accessLogEnabled: true                                   # 是否记录访问日志。默认为false
    accessLogPattern: "message-relay-access-{Y-m-d}.log"     # 访问日志文件格式。默认为"access-{Ymd}.log"

    # 其他配置
    clientMaxBodySize: "8MB"                   # 客户端最大Body上传限制大小，影响文件上传大小(Byte)。默认为8*1024*1024=8MB
    formParsingMemory: 1048576                 # 解析表单时的缓冲区大小(Byte)，一般不需要配置。默认为1024*1024=1MB
    nameToUriType: 0                           # 路由注册中使用对象注册时的路由生成规则。默认为0
    routeOverWrite: false                      # 当遇到重复路由注册时是否强制覆盖。默认为false，重复路由存在时将会在启动时报错退出
    dumpRouterMap: true                        # 是否在Server启动时打印所有的路由列表。默认为true
  tcp-socket-service:
    isEnable: true                             # 是否启用级联服务
    address: ":28080"
    logStdout: true                            # 日志是否输出到终端。默认为true
    errorStack: true                           # 当Server捕获到异常时是否记录堆栈信息到日志中。默认为true
  ssl-socket-service:
    address: ":28443"
    isEnable: true                             # 是否启用级联服务
    crtPath: "manifest/certs/server.crt"       # ssl证书文件
    keyPath: "manifest/certs/server.key"       # ssl rsa私钥文件
    logStdout: true                            # 日志是否输出到终端。默认为true
    errorStack: true                           # 当Server捕获到异常时是否记录堆栈信息到日志中。默认为true
  federate-service:
    address: ":28090"
    isEnable: true                             # 是否启用级联服务
    logStdout: true                            # 日志是否输出到终端。默认为true
    errorStack: true                           # 当Server捕获到异常时是否记录堆栈信息到日志中。默认为true
    localIP: "192.168.200.1"                   # 级联的本端ip
    federateRemoteAddress:                     # 级联的远端ip列表
      - "192.168.200.200"
      - "192.168.200.201"


# https://goframe.org/docs/core/gdb-config-file
database:
  default:
    link: "pgsql:admin:admin@tcp(192.168.200.200:5432)/geo_digital_map"
    debug: true
    pool:
      timezone: "Local"
      maxIdle: 50
      maxOpen: 200
      maxLifetime: "120s"

# https://goframe.org/docs/core/glog-config
logger:
  rest-api:
    path: "./logs/"                          # 日志文件路径。默认为空，表示关闭，仅输出到终端
    file: "message-rest-server-{Y-m-d}.log"  # 日志文件格式。默认为"{Y-m-d}.log"
    prefix: ""                               # 日志内容输出前缀。默认为空
    level: "all"                             # 日志输出级别
    timeFormat: "2006-01-02 15:04:05.000"    # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
    ctxKeys: [ ]                              # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
    header: true                             # 是否打印日志的头信息。默认true
    stdout: true                             # 日志是否同时输出到终端。默认true
    rotateSize: "50M"                        # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
    rotateExpire: 0                          # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
    rotateBackupLimit: 9                     # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupExpire: "7d"                 # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupCompress: 9                  # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
    rotateCheckInterval: "1h"                # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
    stdoutColorDisabled: false               # 关闭终端的颜色打印。默认开启
    writerColorEnable: false                 # 日志文件是否带上颜色。默认false，表示不带颜色
  ws:
    path: "./logs/"                          # 日志文件路径。默认为空，表示关闭，仅输出到终端
    file: "message-ws-server-{Y-m-d}.log"    # 日志文件格式。默认为"{Y-m-d}.log"
    prefix: ""                               # 日志内容输出前缀。默认为空
    level: "all"                             # 日志输出级别
    timeFormat: "2006-01-02 15:04:05.000"    # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
    ctxKeys: [ ]                             # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
    header: true                             # 是否打印日志的头信息。默认true
    stdout: true                             # 日志是否同时输出到终端。默认true
    rotateSize: "50M"                        # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
    rotateExpire: 0                          # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
    rotateBackupLimit: 9                     # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupExpire: "7d"                 # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupCompress: 9                  # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
    rotateCheckInterval: "1h"                # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
    stdoutColorDisabled: false               # 关闭终端的颜色打印。默认开启
    writerColorEnable: false                 # 日志文件是否带上颜色。默认false，表示不带颜色
  federate:
    path: "./logs/"                                # 日志文件路径。默认为空，表示关闭，仅输出到终端
    file: "message-federate-server-{Y-m-d}.log"    # 日志文件格式。默认为"{Y-m-d}.log"
    prefix: ""                                     # 日志内容输出前缀。默认为空
    level: "all"                                   # 日志输出级别
    timeFormat: "2006-01-02 15:04:05.000"          # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
    ctxKeys: [ ]                                   # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
    header: true                                   # 是否打印日志的头信息。默认true
    stdout: true                                   # 日志是否同时输出到终端。默认true
    rotateSize: "50M"                              # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
    rotateExpire: 0                                # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
    rotateBackupLimit: 9                           # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupExpire: "7d"                       # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupCompress: 9                        # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
    rotateCheckInterval: "1h"                      # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
    stdoutColorDisabled: false                     # 关闭终端的颜色打印。默认开启
    writerColorEnable: false                       # 日志文件是否带上颜色。默认false，表示不带颜色